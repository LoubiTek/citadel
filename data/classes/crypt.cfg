/**

Crypt 
 -Played spells
 -Lands that were destroyed or played on top of by another land 
 -Creatures that died

Disappear from the game
 -Discarded cards
 -Creatures that ascend
 -Obliterated
 -Starting creatures/lands that started without a controller, when destroyed
 -Dead creatures/lands that had no card_name (There should be none of these)

*/

{properties: {
	game: { variable: true, type:  "class game_state", access: "private" },
	list: { variable: true, type: "[class crypt.entry]", default: [], access: "private" },
	add_creature: "def(class creature creature) ->commands
		if((not creature.obliterated)
		   and creature.summoner >= 0 
		   and creature.card_name
		   and (not me.contains(creature)),
			add(me.list, [ construct('crypt.entry', {
				card: lib.citadel.create_card(creature.card_name),
				creature: creature,
				owner: creature.summoner
			})]),
		   [ // else
			if(not creature.card_name, game.log_message("CRYPT WARNING: entry had no card; aborted.")),
			if(me.contains(creature), game.log_message("CRYPT WARNING: duplicate creature/land found; aborted."))
		   ]
		)",
	add_played_card: "def(class message.play_card info) ->commands
		if(not info.ability,
			me.add_card( class card<- card, info.player_index )
		) where card = class card_base<- info.ability_obj or info.card",
	add_card: "def(class card card, int owner) ->commands
		if((not card.creature)
		   and owner >= 0
		   and (not me.contains(card)),
			add(me.list, [ construct('crypt.entry', {
				card: card,
				owner: owner
			})]),
		   [ // else
			if(me.contains(card), game.log_message("CRYPT WARNING: duplicate card found; aborted."))
		   ]
		)",

	cards_of: "def(class player player) ->[class card]
		[v.card | v<- me.list, player.omnigraveyard or v.owner=player.player_index]",

	// note: the term 'creature' in code includes lands and buildings
	creatures_of: "def(class player player) ->[class creature]
		[v.creature | v<- me.list, v.creature and (player.omnigraveyard or v.owner=player.player_index)]",
	regular_creatures_of: "def(class player player) ->[class creature]
		filter(me.creatures_of(player), value.is_regular_creature)",
	lands_of: "def(class player player) ->[class creature]
		filter(me.creatures_of(player), value.is_land)",
	buildings_of: "def(class player player) ->[class creature]
		filter(me.creatures_of(player), value.is_building)",

	contains: "def(class card|class creature lookup) ->bool
		(me.get_entry(lookup) != null)",
	get_entry: "def(class card|class creature lookup) ->null|class crypt.entry
		if(lookup is class creature,
		   find(me.list, value.creature and value.creature.summon_id=lookup.summon_id),
		   find(me.list, value.card._uuid=lookup._uuid))",

	erase_card: "def(class card lookup) ->commands [
		set(me.list, filter(me.list, value.card._uuid != lookup._uuid))
	]",
	erase_creature: "def(class creature lookup) ->commands [
		set(me.list, filter(me.list, (not value.creature) or (class creature<- value.creature).summon_id != summon_id))
		where summon_id=lookup.summon_id
	]",
	return_to_map: "def(class creature creature) ->commands
		if(entry, [
			// if it's coming from my crypt, then by default I should be controlling it
			set(creature.controller, entry.owner),
			me.erase_creature(creature),
			add(game.creatures, [creature]) asserting (not (creature in game.creatures)),
			bind_command(game._calculate_resource_levels),
		]) where entry = me.get_entry(creature)",
	return_to_hand: "def(class card|class creature lookup) ->commands
		if(entry, [
			me.erase_card(entry.card),
			add(game.players[entry.owner].hand, [entry.card])			
		]) where entry = me.get_entry(lookup)",

}, classes: {
	entry: {properties: {
		card:     { variable: true, type: "class card" }, // this may not have the same _uuid as original
		creature: { variable: true, type: "null|class creature", default: null  }, // dead creature, if any
		owner:    { variable: true, type: "int"  }, // whose crypt is this in? 
	                                                    // typically the one whose hand the card came from
	}}
}}

