{
	generate_tips: "def(obj citadel_controller ctrl, class game_state game) ->[Tip|null]
	[

/* //TODO: turn off card_anatomy for now.
		if(game.in_response_phase = false and game.nturn = 0 and lib.citadel.num_times_tip_shown('must_end_turn') > 0,
		{
			key: 'card_anatomy',
			text: 'anatomy',
			max_shows: 1,
			targets: [find(ctrl.level.chars, value is obj card and value.in_hand)],
		}
		),
*/


		if(game.in_response_phase = false,
		  if(playable_creature != null and target_creature != null, {
			key: 'play_creature',
			text: 'Play a creature card such as ' + playable_creature.name + '. Click on the card to play it.',
			max_shows: 3,
			targets: [target_creature],
		  })
		where target_creature = if(playable_creature != null, find(ctrl.level.chars, value is obj card and value.in_hand and value.card_type = playable_creature))
		where playable_creature = find(player.hand, value.creature_object != null and value.creature_object.is_land = false and value.creature_object.is_building = false and player.can_afford(value))
		),

		if(player_avatar != null,
		{
			key: 'spell_almost_killed',
			text: 'A spell or ability cannot reduce a player below 1 life. A creature must inflict the fatal blow.',
			max_shows: 10000,
			targets: [player_avatar],
			has_never_show_again: true,
		}
		) where player_avatar = if(dead_from_spell_player != null, find(ctrl.get_avatars(), value.player_num = dead_from_spell_player.player_index))
		  where dead_from_spell_player = find(game.players, value.spell_blocked_from_killing),


		if(ctrl.myplayer.undoable_discards > 0,
		{
			key: 'undo_discard',
			text: 'If you discard a card by mistake, you can undo it by clicking the crypt.',
			max_shows: 3,
			targets: if(obj, [obj], []) where obj = find(ctrl.level.chars, value is obj crypt_library_display and value.is_crypt and value.player_index = game.nplayer)
		}
		),

		if(size(game.players[game.nplayer].deck) > 0 and game.players[game.nplayer].deck[0].shadow,
		{
			key: 'shadow_deck',
			text: 'Your deck has run out of cards. You now draw cards from your <i>shadow deck</i>. Shadow cards work as normal cards, but you lose one life every time you discard or play them.',
			max_shows: 3,
			targets: if(obj, [obj], []) where obj = find(ctrl.level.chars, value is obj crypt_library_display and value.is_crypt = false and value.player_index = game.nplayer)
		}),

		if(game.in_response_phase = false and game.nturn <= 1 and size(opponent.deck) <= 10,
		{
			key: 'deck_size',
			text: 'Your opponent has a small deck. This most likely means they have a very aggressive set of spells and aim to win the game quickly. If you can withstand the onslaught you can win once they run out of spells.',
			max_shows: 1,
			targets: if(library_obj = null, [], [library_obj]),
		} where library_obj = find(ctrl.level.chars, value is obj crypt_library_display and value.num_items = size(opponent.deck))
		),

		if(game.in_response_phase = false and size(player.hand) = 4 and find(game.lands, value.name = 'Village' and value.controller = game.nplayer) = null,
		{
			key: 'villages',
			text: 'There are villages on this battlefield. Creatures capture them for you by moving into them. Each village you control increases your hand size, so capture as many villages as you can!',
			max_shows: 2,
			targets: map(filter(game.lands, value.name = 'Village'), find(ctrl.level.chars, value is obj creature and value.creature_object = context.value)),
		}
		),

		if(game.in_response_phase = false and find(player.hand, player.calculate_cost(value) <= player.calculate_income(game)+1) = null and size(player.hand) >= 4 and player.resources >= player.calculate_income(game), {
			key: 'may_discard',
			text: q(All of your spells are much too expensive for you to cast at the moment. Consider discarding some of them by right-clicking on them. Hopefully you will draw some less expensive cards to replace them which you can play sooner.),
			max_shows: 3,
		}),

		if(game.in_response_phase = false and size(player.hand) >= 4 and player.resources >= player.calculate_income(game),
		
		if(expensive_card != null and expensive_card_obj != null, {
			key: 'may_discard_very_expensive',
			text: q(This card is much too expensive for you to cast right now. Choose carefully whether you want to hold onto it to cast when your mana pool grows large enough, or right-clicking it to discard it now.),
			max_shows: 3,
			targets: [expensive_card_obj],
		})

		where expensive_card_obj = if(expensive_card != null, find(ctrl.level.chars, value is obj card and value.card_type = expensive_card))
				
		where expensive_card = find(player.hand, player.calculate_cost(value) > player.calculate_income(game)+4)),

		if(game.in_response_phase = false and player.has_possible_play(game) = false and ctrl.get_end_turn_button() != null, {
			key: 'must_end_turn',
			text: q(You don't have any cards you can play. Press the End Turn button to end your turn),
			max_shows: 3,
			targets: filter([ctrl.get_end_turn_button()], value != null),
		}),

		if(game.in_response_phase = false,
			if(devotion_banner != null, {
				key: 'xp_levels',
				text: q(Your <b>devotion</b> to a <b>school</b> is equal to the number of <b>creatures</b> and <b>lands</b> you have in that school. The cost of casting <b>spells</b> is reduced by your devotion to that school.),
				max_shows: 2,
				targets: [devotion_banner],
			}
			) where devotion_banner = find(ctrl.level.chars, value is obj devotion_banner and value.player_index = 0)
		),

		if(game.in_response_phase = false,
		  if(summoned_creature != null, {
			key: 'summoned_creature',
			text: 'You have summoned a ' + summoned_creature.creature_object.name + '! It is exhausted when it is first summoned, meaning it cannot move or attack. It will begin moving at the start of your next turn.',
			max_shows: 2,
			targets: [summoned_creature],
		  })
		where summoned_creature = find(ctrl.level.chars, value is obj creature and value.creature_object.controller = game.nplayer and value.creature_object.is_land = false and value.creature_object.is_building = false and value.creature_object.summoned_this_turn)
		),

		if(game.in_response_phase = false,
		if(shattered != null, {
			key: 'shattered_theirs',
			text: q(You have destroyed the enemy's ) + shattered.seal_name + q( Seal, causing them to lose ) + str(shattered.seal_damage) + q( life. Try to get creatures to the end of some other lanes to break the seals there as well!),
			targets: [shattered],
		})
		  where shattered = find(ctrl.level.chars, value is obj seal and value.shattering and value.player_num != game.nplayer)
		),

		if(engaged_creature != null and engaged_creature_obj != null, {
			key: 'engaged_creature',
			text: 'Your ' + engaged_creature.name + ' is attempting to move into a tile occupied by an enemy. These creatures become engaged and are ready to fight. When combat occurs they will each deal damage to each other according to their attack power.',
			max_shows: 2,
			targets: [engaged_creature_obj],
		})
		where engaged_creature_obj = if(engaged_creature != null, find(ctrl.level.chars, value is obj creature and value.creature_object = engaged_creature))
		where engaged_creature = find(game.creatures, value.controller = game.nplayer and value.is_engaged(game)),

		//advise on use of first strike creature
		if(game.in_response_phase = false,

		  if(playable_creature != null,

			if(enemy != null,
				{
					key: 'first_strike_advice',
					text: 'Your ' + playable_creature.name + ' has First Strike. Summoning them to face the enemy ' + enemy.name + ' is a good strategy since their attack power is enough to kill the ' + enemy.name + ' before it gets a chance to strike.',
					max_shows: 3,
					targets: [find(ctrl.level.chars, value is obj card and value.in_hand and value.card_type = playable_creature), find(ctrl.level.chars, value is obj creature and value.creature_object = enemy)],
				}
			)
		    where enemy = find(game.creatures, value.controller != game.nplayer and ('First Strike' not in value.abilities) and value.loc != game.players[game.nplayer].summoning_loc_in_row(game, value.loc[0]) and value.is_melee and playable_creature_instance.attack >= value.life + value.armor and find(game.creatures, value != context.value and value.loc[0] = context.value.loc[0]) = null)
		    where playable_creature_instance = class creature<- playable_creature.creature_object
		  )
		  where playable_creature = find(player.hand, value.creature_object != null and ('First Strike' in value.creature_object.abilities) and value.creature_object.is_land = false and value.creature_object.is_building = false and player.can_afford(value))
		),

		if(game.in_response_phase = false and find(game.lands, value.name = 'Village' and value.controller = game.nplayer) != null,
		{
			key: 'captured_village',
			text: 'You have captured a <b>village</b>! This village increases the number of spells you hold in your hand. You will lose control of the village if your opponent moves a creature into it.',
			max_shows: 2,
			targets: [
			  find(ctrl.level.chars, value is obj creature and value.creature_object = captured_village)
			]
			  where captured_village = find(game.lands, value.name = 'Village' and value.controller = game.nplayer),
		}
		),

		if(game.in_response_phase = false,
			if(cover_creature != null,
			{
				key: 'cover',
				text: 'Creatures with <b>Cover</b> cannot be targeted by enemy spells',
				max_shows: 2,
				targets: [cover_creature],
			})
			where cover_creature = find(ctrl.level.chars, value is obj creature and 'Cover' in value.creature_object.abilities)
		),

		if(game.in_response_phase = false,
			if(haste_creature != null,
			{
				key: 'cover',
				text: 'Creatures with <b>Haste</b> move and attack on the turn they are summoned, providing less time to defend against them.',
				max_shows: 2,
				targets: [haste_creature],
			})
			where haste_creature = find(ctrl.level.chars, value is obj creature and 'Cover' in value.creature_object.abilities)
		),

		if(game.in_response_phase = false,
			if(regen_creature != null,
			{
				key: 'regeneration',
				text: 'Creatures with <b>Regeneration</b> gain two life each turn. They can go above their starting life.',
				max_shows: 2,
				targets: [regen_creature],
			})
			where regen_creature = find(ctrl.level.chars, value is obj creature and 'Regeneration' in value.creature_object.abilities)
		),

		if(game.in_response_phase = false and size(player.hand) = 5,
				
			if(moving_creature != null,
			{
				key: 'creature_movement',
				text: 'Most creatures will move forward one space each turn.',
				max_shows: 2,
				targets: [
				  find(ctrl.level.chars, value is obj creature and value.creature_object = moving_creature)
				],
			}
			)
			  where moving_creature = find(game.creatures, value.controller = game.nplayer and value.spaces_moved_this_turn = 1 and value.move = 1)
		),

		if(game.in_response_phase = false and size(player.hand) = 5 and find(game.creatures, value.controller = game.nplayer and value.spaces_moved_this_turn = 2 and value.move = 2) != null,
		{
			key: 'creature_movement',
			text: 'This creature can move two spaces each turn. Most creatures only move one space each turn.',
			max_shows: 2,
			targets: [
			  find(ctrl.level.chars, value is obj creature and value.creature_object = moving_creature)
			]
			  where moving_creature = find_or_die(game.creatures, value.controller = game.nplayer and value.spaces_moved_this_turn = 2 and value.move = 2)
		}
		),

		if(game.in_response_phase = false and ctrl.avatar_life != [],
		{
			key: 'player_life',
			text: q(Each player starts with 40 life. Damage your opponent by getting creatures to the opponent's side of the board. You win the game by reducing your opponent's life to 0. ),
			targets: ctrl.avatar_life,
		}),

		//warn against threats if there is an enemy creature one away
		//from our end zone.
		if(game.in_response_phase = false,
		if(threat != null and threat_obj != null,
		{
			key: 'threat',
			text: q(The enemy's ) + threat.name + q( approaches your Citadel! If it reaches your Citadel it will break the seal dealing ) + str(game.trophies[0][threat.loc[0]]) + q( damage to you, and also deal ) + str(threat.attack) + q( based on its attack power. Consider summoning a creature to block it!),
			targets: [threat_obj],
		}
		)
			where threat_obj = if(threat != null, find(ctrl.level.chars, value is obj creature and value.creature_object = threat))
			where threat = find(game.creatures,
			  value.is_building = false and
			  value.controller != game.nplayer and
			  value.controller != -1 and
			  game.trophies[0][value.loc[0]] > 0 and
			  value.loc[1] = game.lanes[value.loc[0]].begin + 1 and
			  game.creature_at_loc([value.loc[0], game.lanes[value.loc[0]].begin]) = null)
		),

		if(game.in_response_phase and player.has_possible_play(game), {
			key: 'response_phase',
			text: 'Response Phases&emdash;Your opponent has played a card, and you have some response cards in your hand. If you want you can play a response card now or you can just pass.',
			max_shows: 3,
		}
		)
	]
	where player = game.players[game.nplayer]
	where opponent = game.players[(game.nplayer+1)%2]",
}
