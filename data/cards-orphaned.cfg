{
	"Collapse": {
		name: "Collapse",
//		set: "core",
		type: "spell",
		school: "@eval FOOD",
		portrait: "collapse.png",
		cost: 4,
		loyalty_cost: 2,
		is_response: false,
		rarity: 0,
		rules: "Destroy all buildings and lands in target tile.",
		possible_targets: "all_tiles_as_possible_targets",
        on_play: "def(class game_state game, class message.play_card info) ->commands 
[
  if(construct, set(construct.destroyed, true)),
  if(creature and creature.is_building, set(creature.destroyed, true)),
]
where creature = game.creature_at_loc(target)
where construct = game.land_at_loc(target) 
where target = info.targets[0]",
		
		ai_score: "def(class game_state game, [Loc] targets) ->int
		if(target.controller = game.current_player_index, 0,
		target.ai_value(game)*10
		) where target = game.creature_at_loc_or_die(targets[0])",
	},


	"Zombie": {
		name: "Zombie",
		rarity: 0,
		type: "creature",
		portrait: "zombie.png",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		creature: {
			tags: ['Zombie', "Undead"],
            portrait: "zombie.png",
			attack: 3,
			life: 2,
			move: 1,

			image_num: 4,
			sound_summoned: "creatures/summon-zombie.wav",
			sound_death: "creatures/death-zombie.wav",
			sound_walk: "creatures/move-stiff.wav",
            triggered_abilities: [{
				name: "Virus",
				rules: "When Zombie destroys a creature, summon a Zombie in its place.",
				on_kill: "def(class creature creature, class game_state game, class creature victim) ->commands
                if(not victim.is_building and not game.creature_at_loc(victim.loc), game.summon_creature(
			lib.citadel.create_creature('Zombie', {
				name: 'Zombie',
				controller: creature.controller,
				loc: victim.loc,
			})))
			",
			}],
            
		}
	},

	"Skeleton Archer": {
		name: "Skeleton Archer",
		rarity: 1,
		type: "creature",
		portrait: "banebow.png",
		cost: 4,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		creature: {
			tags: ["Skeleton", "Undead"],
            abilities: ['Ranged'],
			attack: 3,
			life: 2,
			move: 1,
			sound_summoned: "creatures/summon-skeleton.wav",
			sound_death: "creatures/death-skeleton.wav",
			sound_walk: "creatures/move-stiff.wav",
			portrait: "banebow.png",
			image_num: 71,
			// has bow
			overlays: [{image_num: 7}],

            triggered_abilities: [{
				name: "Revenant",
				once: true,
				rules: "When Skeleton dies, it is resurrected.",

				on_die: "def(class creature creature, class game_state game) ->commands
				if(not game.creature_at_loc(creature.loc), game.summon_creature(
				  lib.citadel.create_creature(creature.name, {
					name: creature.name,
					controller: creature.controller,
					loc: creature.loc,
					card_name: creature.card_name,
					summon_id: creature.summon_id,
					triggered_abilities: filter(lib.citadel.create_creature(creature.name).triggered_abilities, value.name != 'Revenant')
				  })
				))",
			}],

		},
	},
    

		
	"Huge Bat": {
		name: "Huge Bat",
		type: "creature",
		portrait: "huge-bat.png",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		rarity: 1,
		creature: {
			tags: ['Bat'],
			abilities: [ "Flying", "Life Drain" ],
			
			activated_abilities: [
			{
				name: "Cover of Night",
				cost: 2,
				school: "@eval BLOOD",
				rules: "Sacrifice this creature and give cover to target creature until end of turn.",
				is_response: true,
				possible_targets: "def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
					if(targets = [], [c.loc | c<- game.creatures, c != creature, c.is_valid_target(game, game.nplayer, me)])
				",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[
					target_creature.add_ability_until_end_of_turn('Cover'),
					set(bat.destroyed, true)
				]	
					asserting bat
					asserting size(info.targets) = 1
					where bat = info.get_creature(game)
					where target_creature = game.creature_at_loc_or_die(info.targets[0])"
			}
			],
			attack: 3,
			life: 2,
			move: 1,
			sound_walk: "creatures/move-wings.wav",
			image_num: 27,
			
			//the bat has a shadow.
			overlays: [{
				image_num: 0,
				alpha: 0.5,
			}],
		},
	},

	"Lich": {
		name: "Lich",
		type: "creature",
		portrait: "lich.png",
		cost: 4,
		loyalty_cost: 4,
		school: "@eval BLOOD",
		rarity: 1,
		rules: "Lich takes half combat damage from non-blood sources.",
		creature: {
			tags: ["Lich", "Undead"],
			abilities: ["Life Drain"],
			attack: 6,
			life: 10,
			move: 1,
			image_num: 28,
			armor_against: "
			def(class game_state game, class creature attacker, int damage) ->int
			if(not (2 in attacker.school), 0, damage / 2)",
		}
	},
	
	"Skeleton Corpse": {
		name: "Skeleton Corpse",
		type: "creature",
		portrait: "skeletal_remains.png",
		cost: 0,
		loyalty_cost: 4,
		school: "@eval BLOOD",
		creature: {
			tags: ["Undead"],
			token: true,
			life: 2,
			portrait_scale: .25,
			image_num: 8,
			is_land: true,
			activated_abilities: [{
				name: 'Resurrect',
				cost: 2,
				school: "@eval BLOOD",
				is_response: false,
				once_per_turn: false,
				rules: 'Sacrifice this construct, summon a Skeleton in its place.',
				possible_targets: "def(class game_state game, class creature corpse, [Loc] targets) ->[Loc]|null
					if(game.creature_at_loc(corpse.loc) != null, [], null)",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[game.summon_creature(
			    lib.citadel.create_creature('Skeleton',
				{
					name: 'Skeleton',
					controller: creature.controller,
					loc: creature.loc
			    })), set(creature.destroyed, true)]
				where creature = info.get_creature(game)",
			}]
		},
	},

	"Skeleton Archer Corpse": {
		name: "Skeleton Archer Corpse",
		type: "creature",
		portrait: "skeletal_remains.png",
		cost: 0,
		loyalty_cost: 4,
		school: "@eval BLOOD",
		creature: {
			tags: ["Undead"],
			token: true,
			life: 2,
			portrait_scale: .25,
			image_num: 8,
			is_land: true,
			activated_abilities: [{
				name: 'Resurrect',
				cost: 2,
				school: "@eval BLOOD",
				is_response: false,
				once_per_turn: false,
				rules: 'Sacrifice this construct, summon a Skeleton Archer in its place.',
				possible_targets: "def(class game_state game, class creature corpse, [Loc] targets) ->[Loc]|null
					if(game.creature_at_loc(corpse.loc) != null, [], null)",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[game.summon_creature(
			    lib.citadel.create_creature('Skeleton Archer',
				{
					name: 'Skeleton Archer',
					controller: creature.controller,
					loc: creature.loc
			    })), set(creature.destroyed, true)]
				 where creature = info.get_creature(game)",
			}]
		},
	},

	
	"Blood Harvest": {
		name: "Blood Harvest",
		type: "spell",
		school: "@eval BLOOD",
		cost: 0,
		loyalty_cost: 3,
		is_response: true,
		rarity: 0,
		rules: "When a creature dies this turn, you gain 2 mana.",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		game.players[game.current_player]
		.creature_avatar.add_triggered_ability_until_end_of_turn({
			name: q(Blood Harvest),
			on_another_creature_died: q(def(class creature creature, class game_state game, class creature victim) ->commands
			if(creature.controller != -1 and (not victim.is_building) and (not victim.is_land), [
			add(game.players[creature.controller].resources, 2)
			]))
		})"
	},
	
	"Thirst for Blood": {
		name: "Thirst for Blood",
		type: "spell",
		school: "@eval BLOOD",
		portrait: "thirst-for-blood.png",
		cost: 1,
		loyalty_cost: 2,
		is_response: true,
		rarity: 0,
		rules: "Target creature gains Life Drain.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		add(game.creature_at_loc_or_die(info.targets[0]).abilities, ['Life Drain'])"
	},
	
	"Sudden Illness": "Chill Wind",

	"Essence Drain": {
		name: "Essence Drain",
		type: "spell",
		school: "@eval BLOOD",
		portrait: "thirst-for-blood.png",
		cost: 0,
		loyalty_cost: 3,
		is_response: false,
		rarity: 0,
		is_channeled: true,
		rules: "Target creature loses X life, another target creature gains X life",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
			if(size(targets) <= 1, filter([Loc]<- all_creatures_as_possible_targets(game, avatar, []), value not in targets),
			   null)
		",

		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
			add(game.creature_at_loc_or_die(info.targets[0]).life, -info.channel),
			add(game.creature_at_loc_or_die(info.targets[1]).life, info.channel),
		]
		",
	},
    
    "Dread": {
		name: "Dread",
		rarity: 1,
		type: "spell",
		cost: 2,
		loyalty_cost: 2,
		portrait: "dread.png",
		school: "@eval BLOOD",
		rules: "Target creature loses attack equal to your Entropia level and becomes snared.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
          [
		    add(target.attack, -game.players[info.player_index].get_resource_level(BLOOD)),
            if(not(target.controller = info.player_index), add(target.status_effects, ['Snared']), target.apply_effect_until_end_of_turn('move', -1)),
		  ]
		   where target = game.creature_at_loc_or_die(info.targets[0])",

	},
    
    "Deathseeker Mantra": {
		name: "Deathseeker Mantra",
		rarity: 1,
		type: "spell",
		cost: 1,
		loyalty_cost: 5,
		portrait: "deathseeker-mantra.png",
        is_response: true,
		school: "@eval BLOOD",
		rules: "Target creature you control gains lethal and -8 armor.",
        flavor_text: "I'm going. You're going too.",
		possible_targets: "my_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
          [
		    add(target.armor, -8),
            add(target.abilities, ['Lethal'])
		  ]
		   where target = game.creature_at_loc_or_die(info.targets[0])",

	},

	"Dark Effigy": {
		name: "Dark Effigy",
		type: "spell",
		school: "@eval BLOOD",
		portrait: "dark-effigy.png",
		cost: 1,
		loyalty_cost: 2,
		is_response: true,
		rarity: 2,
		is_channeled: false,
		rules: "Target creature gains 'If this creature dies, the opposing creatures gain +1 attack.'",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		add(target.triggered_abilities, [{
			name: 'Dark Effigy',
			rules: q(If this creature dies, the opposing creatures gain +1 attack.),
			on_die: 'def(class creature died, class game_state game) -> commands
				map(filter(game.creatures, value.controller != died.controller),
					add(value.attack, 1))
			',
		}])
		where target = game.creature_at_loc_or_die(info.targets[0])
		",
	},
    
	"Slow Illness": {
		name: "Slow Illness",
		type: "spell",
		school: "@eval BLOOD",
		cost: 2,
		loyalty_cost: 2,
		is_response: false,
		rarity: 1,
		rules: "Target creature gets -2 life this turn.",
		possible_targets: "enemy_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		game.creature_at_loc_or_die(info.targets[0])
		.apply_effect_until_end_of_turn('life', -2)",
		
		ai_score: "def(class game_state game, [Loc] targets) ->int
		if(target.controller = game.current_player_index, 0,
		if(target.life, target.ai_value(game)*10, 0))
		where target = game.creature_at_loc_or_die(targets[0])",
	},
	
	"Dark Coven": {
		name: "Dark Coven",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		portrait: "dark-coven.png",
		school: "@eval BLOOD",
		rarity: 0,
		rules: "Creatures you control in this lane have Life Drain.",
		creature: {
			tags: ["Tower"],
			life: 6,
			is_land: true,
			image_num: 1,
			static_ability_effect: "if(creature.controller = target.controller and creature.loc[0] = target.loc[0], target.add_ability_static_duration('Life Drain'))",
		}
	},
    
    "Haunted Hollow": {
		name: "Haunted Hollow",
		type: "creature",
		cost: 4,
		loyalty_cost: 1,
		school: "@eval BLOOD",
		portrait: "haunted-hollow.png",
		creature: {
			tags: ["Terrain"],
			is_land: true,
			image_num: 18,
            passive_abilities: [{
                name: 'Haunting',
                rules: "The cost of ghosts, phantoms, horrors, and spirits in your hand is one less.",
				static_effect: "def(class game_state game, class creature creature) ->commands
				if(creature.controller >= 0,
				   game.players[creature.controller].add_static_cost_filter(
				     construct('cost_filter', {
						filter_cost: q(def(class player p, class card_base card, int cost) ->int
						   if(card.creature_object and (('Ghost' in card.creature_object.tags)
                           or('Phantom' in card.creature_object.tags)
                           or('Horror' in card.creature_object.tags)
                           or('Spirit' in card.creature_object.tags)),
                           max(0, cost-1), cost)),
					})))",
			}],
		},
	},
	
	"Fleshworks": {
		name: "Fleshworks",
		type: "creature",
		cost: 4,
		loyalty_cost: 3,
		school: "@eval BLOOD",
		rarity: 1,
		rules: "When a creature attacks this building, gain control of that creature.",
		creature: {
			tags: ["Tower"],
			life: 6,
			sprite_sheet: 'building',
			image_num: 1,
			is_building: true,
			on_attacked: "
			def(class game_state game, class creature attacker, int damage) ->commands
			if(attacker.controller != me.controller,
			set(attacker.controller, me.controller))",
		},
	},
	
	"Fiendish Sprite": {
		name: "Fiendish Sprite",
		type: "creature",
		portrait: "fiendish-sprite.png",
		cost: 3,
		loyalty_cost: 2,
		school: "@eval BLOOD",
		rarity: 0,
		rules: "When Fiendish Sprite attacks a creature, that creature gains Poisoned.",
		creature: {
			tags: ["Fiend", "Undead"],
			attack: 2,
			life: 2,
			move: 2,
			image_num: 55,
			on_attacked: "
			def(class game_state game, class creature attacker, int damage) ->commands
			if(damage != 0 and attacker.controller != me.controller and
			(not attacker.is_building),
			add(attacker.status_effects, ['Poisoned']))",
		},
	},
	
	"Witch-King": {
		name: "Witch-King",
		cost: 4,
		portrait: "witch-king.png",
		loyalty_cost: 2,
		school: "@eval BLOOD",
		rarity: 2,
		rules: "Other creatures you control have +1 attack, +1 life. When Witch-King dies, destroy all creatures.",
		creature: {
			tags: ["Witch", "Human"],
			attack: 6,
			life: 8,
			move: 1,
			image_num: 7,
			on_die: "def(class game_state game) ->commands
			map(game.creatures,
			if(not value.is_building,
			set(value.destroyed, true)))",
			static_ability_effect: "if(creature != target and creature.controller = target.controller and not target.is_building,
			[target.apply_static_effect('attack', 1),
			target.apply_static_effect('life', 1)])",
		},
	},

	"Krelethi the Soul-Devourer": {
		name: "Krelethi the Soul-Devourer",
		cost: 5,
		loyalty_cost: 3,
		school: "@eval BLOOD",
		hero: true,
		rarity: 2,
		rules: "All 'Undead' creatures you control have +1 attack. When Krelethi the Soul-Devourer destroys a creature, restore that creature's life and gain control of it. It becomes 'Undead'.",
		//flavour_text: "Reaching from the afterlife, destroying the souls of humanity",
		creature: {
			tags: ['Undead'],
			abilities: ['Life Drain'],
			attack: 8,
			life: 8,
			move: 1,
			image_num: 7,
			on_kill: "def(class game_state game, class creature victim) ->commands
			if(not victim.is_building, if(resurrect, [resurrect, set(victim.controller, me.controller), set(victim.life, victim.starting_life), add(victim.tags, ['Undead'])]) where resurrect = game.crypt.return_to_map(victim))",
			static_ability_effect: "if(creature != target and creature.controller = target.controller and not target.is_building and 'Undead' in creature.tags, target.apply_static_effect('attack', 1))",
		},
	},
	
	"Patched Horror": {
		name: "Patched Horror",
		portrait: "patched-horror.png",
		cost: 4,
		loyalty_cost: 3,
		school: "@eval BLOOD",
		rarity: 1,
		rules: "When Patched Horror destroys a creature, it gains half the destroyed creature's attack.",
		creature: {
			tags: ['Undead'],
			attack: 8,
			life: 8,
			move: 1,
			image_num: 60,
			on_kill: "def(class game_state game, class creature victim) ->commands
			if(not victim.is_building, add(me.attack, victim.attack/2))",
		},
	},

	
	"Vampire Lord": {
		name: "Vampire Lord",
		type: "creature",
		portrait: "vampire-lord.png",
		cost: 7,
		loyalty_cost: 3,
		school: "@eval BLOOD",
		rarity: 1,
		creature: {
			tags: ['Vampire', "Undead"],
			abilities: ['Life Drain'],
			sound_summoned: "creatures/summon-vampire.wav",
			sound_death: "creatures/death-vampire.wav",
			attack: 6,
			life: 6,
			move: 1,
			image_num: 7,
            triggered_abilities: [{
				name: "Blood Claim",
				rules: "When Vampire Lord destroys a creature, summon a vampire in its place.",
				on_kill: "def(class creature creature, class game_state game, class creature victim) ->commands
                if(not victim.is_building and not game.creature_at_loc(victim.loc), game.summon_creature(
			lib.citadel.create_creature('Vampire', {
				name: 'Vampire',
				controller: creature.controller,
				loc: victim.loc,
			})))
			"},
            {
				name: "Syphoning Presence",
				rules: "At the start of your turn. Adjacent enemies lose one life and Vampire Lord gains 1 life for each enemy affected.",
				on_begin_turn: "def(class creature creature, class game_state game) ->commands 
                [
                    map(game.creatures, if((game.current_player_index = creature.controller) and (not value.controller = creature.controller) and (not value.is_land) and (not value.is_building) and game.locs_adjacent(creature.loc, value.loc), [
			        add(value.life, -1),
                    add(creature.life, 1)
		]))]",
			},
			]},
	},
	
	"Vampire Bat": {
		name: "Vampire Bat",
		type: "creature",
		portrait: "vampire-bat.png",
		cost: 2,
		loyalty_cost: 1,
		school: "@eval BLOOD",
		rarity: 0,
		rules: "",
		creature: {
			tags: ['Vampire', "Undead"],
			abilities: [ "Flying" ],
			
			activated_abilities: [
			{
				name: "Transform",
				cost: 1,
				school: "@eval BLOOD",
				rules: "Transform this creature into a Vampire.",
				on_play: "def(class game_state game, class message.play_card info) ->commands creature.transform(game, map<- lib.citadel.create_creature('Vampire'))
				  where creature = info.get_creature(game)"
			}
			],
			attack: 2,
			life: 2,
			move: 2,
			sound_walk: "creatures/move-wings.wav",
			image_num: 27,
			
			//the bat has a shadow.
			overlays: [{
				image_num: 0,
				alpha: 0.5,
			}],
		}
	},


    "Spark Tank": {
		name: "Spark Tank",
		rarity: 2,
		type: "creature",
		portrait: "spark-tank.png",
		portrait_focus: [451,198],
		portrait_focus_height: 120,
		cost: 6,
		loyalty_cost: 2,
		school: "@eval GOLD",
		creature: {
			tags: ['Mechanical'],
			sprite_sheet: "creature_large",
			image_num: 1,
			attack: 4,
			life: 8,
			move: 1,
            max_actions: 2,
            armor: 2,

			activated_abilities: [
				{
					name: 'Overload',
					cost: 2,
					school: "@eval GOLD",
					rules: "Spend an action, gain +1 move and +3 attack until end of turn.",
					once_per_turn: true,
                    is_response: true,

					on_play: "def(class game_state game, class message.play_card info) ->commands [
                        creature.apply_effect_until_end_of_turn('attack', 3),
                        creature.apply_effect_until_end_of_turn('move', 1),
					]
					  where creature = info.get_creature(game)",
				}
			]
		}
	},

	"Dwarvish Engineer": {
		name: "Dwarvish Engineer",
		type: "creature",
		portrait: "dwarvish-engineer.png",
		cost: 3,
		loyalty_cost: 1,
		school: "@eval GOLD",
		rules: "You may summon lands on or adjacent to Dwarvish Engineer.",
		creature: {
			name: 'Dwarvish Engineer',			
			tags: ['Dwarf'],
			allows_summoning: "def(class game_state game, class creature target) ->[Loc]
			if(target.is_land,
			  filter(game.all_locs, (game.locs_adjacent(value, loc) or value = loc) and
			         game.land_at_loc(value) = null), [])",

			school: "@eval GOLD", 
			attack: 2,
			life: 4,
			move: 1,
			image_num: 71,
		}
	},

	"Launchpad": {
		name: "Launchpad",
		type: "creature",
		cost: 1,
		loyalty_cost: 5,
		school: "@eval GOLD",
		rules: "At the start of each turn, a creature on the same tile as Launchpad gets +2 move this turn.",
		creature: {
			is_land: true,
			on_begin_turn: "def(class game_state game) ->commands
				map(game.creatures, if(value.loc = me.loc, value.apply_effect_until_end_of_turn('move', 2)))
			"
		}
	},

	"Dwarvish Crossbow": "Thunderer",

	"Ballista": {
		name: "Ballista",
		type: "creature",
		cost: 3,
		loyalty_cost: 3,
		school: "@eval GOLD",
		creature: {
			sprite_sheet: 'building',
			life: 4,
			attack: 2,
			image_num: 0,
			is_building: true,
		}
	},

	"Eldric's Bazaar": {
		name: "Eldric's Bazaar",
		type: "creature",
		cost: 3,
		loyalty_cost: 4,
		school: "@eval GOLD",
		rules: "-1 Hand size. At the start of your turn, you gain +3 mana;.",
		creature: {
			tags: ["Marketplace"],
			life: 2,
			is_land: true,
			image_num: 0,

			on_begin_turn: "def(class game_state game) ->commands
			if(game.current_player = controller,
			   [game.players[controller].gain_mana_with_hint(game, loc)]*3)",

			static_effect: "def(class game_state game) -> commands
			if(controller >= 0,
			   game.players[controller].apply_static_effect(
				(def(class player p, map info) ->commands add(p.hand_size, -1)),
				(def(class player p, map info) ->commands add(p.hand_size, 1)),
			  {}))",
		}
	},


	"Jaded Runesmith": {
		name: "Jaded Runesmith",
		type: "creature",
		portrait: "jaded-runesmith.png",
		cost: 6,
		loyalty_cost: 0,
		school: "@eval GOLD",
		creature: {
			tags: ['Human'],
			attack: 6,
			life: 4,
			move: 1,
			armor: 3,
			image_num: 71,
            triggered_abilities: [{
				name: 'Rune Spark',
				rules: 'When you cast a rune spell, Gain two mana.',
				on_card_played: "def(class creature creature, class game_state game, class player player, class message.play_card info) ->commands
					if(player.player_index = creature.controller and info.card and 'Rune' in info.card.tags,
					   [
                       game.players[creature.controller].gain_mana_with_hint(game, creature.loc),
                       game.players[creature.controller].gain_mana_with_hint(game, creature.loc)
                       ])
				",
			}],
		}		
	},
    
    "Biting Rune": {
		name: "Biting Rune",
		type: "spell",
        portrait: "biting-rune.png",
		is_response: false,
        tags: ['Rune'],
		cost: 2,
		loyalty_cost: 3,
		school: "@eval GOLD",
		rarity: 0,
		rules: "Target creature gains 3 attack.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  add(game.creature_at_loc_or_die(info.targets[0]).attack, 3)
					asserting size(info.targets) = 1",
	},
    
    "Blunting Rune": {
		name: "Blunting Rune",
		type: "spell",
        portrait: "blunting-rune.png",
		is_response: false,
        tags: ['Rune'],
		cost: 3,
		loyalty_cost: 2,
		school: "@eval GOLD",
		rarity: 0,
		rules: "Target creature gains 2 Armor.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		  add(game.creature_at_loc_or_die(info.targets[0]).armor, 2)
					asserting size(info.targets) = 1",
	},
    
    "Sentry Rune": {
		name: "Sentry Rune",
		type: "spell",
        portrait: "sentry-rune.png",
		is_response: false,
        tags: ['Rune'],
		cost: 4,
		loyalty_cost: 2,
		school: "@eval GOLD",
		rarity: 0,
		rules: "Place a 6,1 Lightning Ward with feral, cover, first strike, and 0 movement in target hex. May not target a hex where your opponent can summon.",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [],
			   filter(game.all_locs, (game.is_loc_on_board(value) and
					  game.creature_at_loc(value) = null and
                      value not in game.players[(avatar.controller+1)%2].summoning_locs(game, construct('creature', {name: 'Wolf', school: FOOD, image_num: 5}))
                      )), null
                      )",
		   on_play: "def(class game_state game, class message.play_card info) ->commands
		   map(info.targets, game.summon_creature(
		   lib.citadel.create_creature('Lightning Ward', {
			name: 'Lightning Ward',
			controller: game.current_player,
			loc: value,
            })))"
	},
    
    
	"Lightning Ward": {
		name: "Lightning Ward",
		type: "creature",
		portrait: "sentry-rune.png",
		cost: 4,
		loyalty_cost: 2,
		school: "@eval GOLD",
		rarity: 0,
		creature: {
			tags: ['Ward'],
			abilities: ['First Strike', 'Cover', 'Feral'],
            portrait: "sentry-rune.png",
			image_num: 26,
			attack: 6,
			life: 1,
			move: 0,
            activated_abilities: [
				{
					name: 'Erase',
					cost: 0,
					school: "@eval GOLD",
					rules: "Remove the ward",
					on_play: "def(class game_state game, class message.play_card info) ->commands [
						set(creature.destroyed, true),
					]
					  where creature = info.get_creature(game)",
				}
			]
            }
	},
    
    
    //'Runewall' is the spell that summons a 'Rune Wall'
        "Runewall": {
		name: "Runewall",
		type: "spell",
        portrait: "runewall.png",
		is_response: false,
        tags: ['Rune'],
		cost: 5,
		loyalty_cost: 2,
		school: "@eval GOLD",
		rarity: 0,
		rules: "Place a 0,9 Runewall with cover and feral. When attacked the runewall will inflict equal damage back to the creature that attacked. May not target a hex where your opponent can summon.",
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
		  if(targets = [],
			   filter(game.all_locs, (game.is_loc_on_board(value) and
					  game.creature_at_loc(value) = null and
                      value not in game.players[(avatar.controller+1)%2].summoning_locs(game, construct('creature', {name: 'Wolf', school: FOOD, image_num: 5}))
                      )), null
                      )",
		   on_play: "def(class game_state game, class message.play_card info) ->commands
		   map(info.targets, game.summon_creature(
		   lib.citadel.create_creature('Rune Wall', {
			name: 'Rune Wall',
			controller: game.current_player,
			loc: value,
            })))"
	},
    
    
	"Rune Wall": {
		name: "Rune Wall",
		type: "creature",
		portrait: "runewall.png",
		cost: 5,
		loyalty_cost: 3,
		school: "@eval GOLD",
		rarity: 0,
		creature: {
			tags: ['Ward'],
			abilities: ['Cover', 'Feral'],
            portrait: "runewall.png",
			image_num: 26,
			attack: 0,
			life: 9,
            triggered_abilities: [{
				name: "Rune Retaliation",
				rules: "When an creature deals damage to you, it takes damage equal to the amount inflicted.",
				on_attacked: "def(class creature creature, class game_state game, class creature attacker, int damage) ->commands
                [
                    if(damage>0 and not creature.targets_attacking(game) = [],
                    attacker.inflict_damage(game, damage)),
                ]",
            }],
			move: 0,
            activated_abilities: [
				{
					name: 'Erase',
					cost: 0,
					school: "@eval GOLD",
					rules: "Remove the Ward",
					on_play: "def(class game_state game, class message.play_card info) ->commands [
						set(creature.destroyed, true),
					]
					  where creature = info.get_creature(game)",
				}
			]
		}
	},

    "Shoushini, the Skeleton Queen": {
		name: "Shoushini, the Skeleton Queen",
		rarity: 2,
		type: "creature",
		portrait: "shoushini-skeleton-queen.png",
		portrait_focus: [402,176],
		portrait_focus_height: 160,
		cost: 5,
		loyalty_cost: 3,
		school: "@eval BLOOD",
		hero: true,
		creature: {
			tags: ['Undead', 'Skeleton'],
			attack: 6,
			life: 6,
			move: 1,
			image_num: 80,
			passive_abilities: [{
				name: "Skeleton Queen",
				rules: "Your skeletons gain +1/+2",
				static_effect: "def(class game_state game, class creature creature) ->commands
				[   [target.apply_static_effect('attack', 1),
				     target.apply_static_effect('life', 2)]
				  | target <- game.creatures,
				    target.is_building = false,
                    'Skeleton' in target.tags,
				    target.controller = creature.controller
				]"
			}
			],
		}
	},

    "Bronis Benchar": {
		name: "Bronis Benchar",
		rarity: 2,
		type: "creature",
		portrait: "bronis.png",
		cost: 6,
		loyalty_cost: 2,
		school: "@eval FOOD",
		hero: true,
		creature: {
			tags: ['Human', 'Adventurer'],
			image_num: 46,
			attack: 4,
			life: 8,
			move: 1,
            
            triggered_abilities: [{
				name: "Tagalong",
				rules: "When Bronis is summoned, add Dunic Benchar to your hand.",
				on_summoned: "def(class creature creature, class game_state game) ->commands
                [
                    add(game.players[(creature.controller)].hand, ['Dunic Benchar'])
                ]",
            }],
            
            passive_abilities: [{
				name: "Showoff",
				rules: "While you have Dunic Benchar on the field, Bronis gains haste and +4 attack.",
				static_effect: "def(class game_state game, class creature creature) ->commands
				[   
                    if(creature.controller = target.controller,
				    [creature.apply_static_effect('attack', 4), creature.add_ability_static_duration('Haste')])
				  | target <- game.creatures,
				    target.name = 'Dunic Benchar'
				]"
			}],
		}
	},
    
    //Dunic can only be gotten by playing Bronis
    "Dunic Benchar": {
		name: "Dunic Benchar",
		type: "creature",
		portrait: "dunic.png",
		cost: 1,
		loyalty_cost: 3,
		school: "@eval BLOOD",
		hero: true,
		creature: {
			tags: ['Human', 'Mage', 'Adventurer'],
            abilities: ['Life Drain'],
			image_num: 46,
			attack: 5,
			life: 3,
			move: 1,
            
            triggered_abilities: [{
				name: "Vengeful",
				rules: "If a Bronis Benchar you control dies, Dunic gains +3 attack and +1 movement.",
				on_another_creature_died: "def(class creature creature, class game_state game, class creature victim) ->commands if(victim.name = 'Bronis Benchar' and victim.controller = creature.controller,[
					add(creature.move, 1),
					add(creature.attack, 3),
                    set(creature.portrait, 'dunic-angry.png'),
				])"
			}],
		}
	},

	"Cut-Throat": {
		name: "Cut-Throat",
		type: "creature",
		portrait: "cutthroat.png",
		cost: 2,
		loyalty_cost: 2,
		school: "@eval GOLD",
		creature: {
			tags: ['Human'],
			attack: 5,
			life: 3,
			move: 1,
            triggered_abilities: [{
                name: "Extort",
                rules: "Draw two cards when this card moves into a land you don't control.",
				on_move_over_construct: "def(class creature creature, class game_state game, class creature construct) ->commands
            if(construct.controller != creature.controller, [game.players[creature.controller].draw_cards(game, 2)])",
			}],
		}
	},
    

	"Master Fencer": {
		name: "Master Fencer",
		type: "creature",
		rarity: 1,
		portrait: "master-fencer.png",
		cost: 3,
		loyalty_cost: 3,
		school: "@eval GOLD",
		creature: {
			tags: ['Human'],
			overlays: [ { image_num: 25 } ],
			activated_abilities: [
				{
					name: 'First Strike',
					cost: 1,
					school: "@eval GOLD",
					rules: "This creature gains First Strike this turn.",
					on_play: "def(class game_state game, class message.play_card info) ->commands
					    creature.add_ability_until_end_of_turn('First Strike')
						  where creature = info.get_creature(game)"
				},

				{
					name: "Lunge",
					cost: 1,
					school: "@eval GOLD",
					rules: "This creature gains +1 attack this turn.",
					on_play: "def(class game_state game, class message.play_card info) ->commands
					    creature.apply_effect_until_end_of_turn('attack', 1)
					where creature = info.get_creature(game)"
				},

				{
					name: "Swift",
					cost: 2,
					school: "@eval GOLD",
					once_per_turn: true,
					rules: "This creature gets +1 move this turn.",
					on_play: "def(class game_state game, class message.play_card info) ->commands
					[
					    creature.apply_effect_until_end_of_turn('move', 1),
					    creature.apply_effect_until_end_of_turn('life', -1),
					] where creature = info.get_creature(game)"
				},

			],
			attack: 4,
			life: 4,
			move: 1,
			image_num: 35
		}
	},

    "Redhill Giant": {
		name: "Redhill Giant",
		rarity: 0,
		type: "creature",
		portrait: "redhill-giant.png",
		portrait_focus: [408,260],
		portrait_focus_height: 110,
		cost: 7,
        loyalty_cost: 3,
		school: "@eval GOLD",
		creature: {
			tags: ['Giant'],
			attack: 10,
			life: 10,
			move: 1,
		}
	},

    "Vykdren Draug": {
		name: "Vykdren Draug",
		rarity: 0,
		type: "creature",
		portrait: "vykdren-draug.png",
		portrait_focus: [446,183],
		portrait_focus_height: 200,
// 		artist: "lordbob",
		cost: 7,
		loyalty_cost: 1,
		school: "@eval BLOOD",
		creature: {
			tags: ["Skeleton", "Undead", "Warrior"],
			attack: 5,
			life: 6,
			move: 1,
			sound_summoned: "creatures/summon-skeleton.wav",
			sound_death: "creatures/death-skeleton.wav",
			sound_walk: "creatures/move-stiff.wav",
			portrait: "vykdren-draug.png",
			image_num: 13,
			// has sword
			overlays: [{image_num: 7}],
            passive_abilities: [{
				name: "Soldier of the Dead",
				rules: "Vykdren Draug gains +2 attack for each creature killed this turn.",
				static_effect: "def(class game_state game, class creature creature) ->commands
                [   
                    creature.apply_static_effect('attack', (game.num_creatures_killed_this_turn*2)),
				]",
			}],
            triggered_abilities: [{
				name: "Revenant",
				once: true,
				rules: "If Vykdren Draug would die, it is fully restored instead.",

				on_die: "def(class creature creature, class game_state game) ->commands
				if(not game.creature_at_loc(creature.loc), game.summon_creature(
				  lib.citadel.create_creature(creature.name, {
					name: creature.name,
					controller: creature.controller,
					loc: creature.loc,
					card_name: creature.card_name,
					summon_id: creature.summon_id,
					triggered_abilities: filter(lib.citadel.create_creature(creature.name).triggered_abilities, value.name != 'Revenant')
				  })
				))",
			}],

		},
	},

    	"Channeler": {
		name: "Channeler",
		rarity: 1,
		type: "creature",
		portrait: "channeler.png",
		cost: 4,
		loyalty_cost: 2,
		school: "@eval SAPIENZA",
        flavor_text: "Once power can be channeled, it becomes fluid: flexable and conservable.",
		creature: {
			tags: ['Human', 'Mage'],
			attack: 4,
			life: 7,
            max_actions: 2,
			sound_summoned: "creatures/summon-dark-emissary.wav",
			sound_death: "creatures/death-dark-emissary.wav",
			
			activated_abilities: [
			{
				name: "Draw Power",
				cost: 1,
				school: "@eval SAPIENZA",
				is_response: true,
                once_per_turn: true,
				rules: "Take half of a friendly creatures attack.",
				possible_targets: "def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
					if(targets = [], [c.loc | c<- game.creatures, c != creature, c.controller = creature.controller])
				",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[
					add(creature.attack, (target_creature.attack/2)),
                    add(target_creature.attack, -(target_creature.attack/2)),
				] where target_creature = game.creature_at_loc_or_die(info.targets[0])
				  where creature = info.get_creature(game)
				"
			},
            {
				name: "Channel Power",
				cost: 2,
				school: "@eval SAPIENZA",
				is_response: true,
                once_per_turn: true,
				rules: "Give half your attack to a friendly creature.",
				possible_targets: "def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
					if(targets = [], [c.loc | c<- game.creatures, c != creature, c.controller = creature.controller])
				",
				on_play: "def(class game_state game, class message.play_card info) ->commands
				[
					add(target_creature.attack, (creature.attack/2)),
                    add(creature.attack, -(creature.attack/2)),
				] where target_creature = game.creature_at_loc_or_die(info.targets[0])
				  where creature = info.get_creature(game)"
			},
			],
		}
	},

	"Edo, the Bold": {
		name: "Edo, the Bold",
		rarity: 2,
		type: "creature",
		portrait: "ejalah-the-summoner.png",
		cost: 8,
		loyalty_cost: 4,
		school: "@eval SAPIENZA",
		hero: true,
		creature: {
			tags: ['Human', 'Mage'],
			attack: 8,
			life: 8,

			activated_abilities: [{
				name: "Command Magic",
				rules: "Spend an action, cancel your opponent's card which is currently being cast, and put a copy of it into your hand.",

				school: "@eval SAPIENZA",
				portrait: "command-magic.png",
				cost: 2,
				is_response: true,
				once_per_turn: true,
				possible_targets: "
				  def(class game_state game, class creature edo, [Loc] targets) ->[Loc]|null
				    if(game.stack = []
					or not (game.stack[size(game.stack)-1] is class message.play_card)
					or game.stack[size(game.stack)-1].force_fizzle=true,
					[], null)
				",

				on_play: "def(class game_state game, class message.play_card info) ->commands
				[
					set(countered_card.force_fizzle, true),
					if (countered_card.card and lib.citadel.card_exists(countered_card.card.name),   // <-- it might be an activated ability and not a real card
						add(game.players[info.player_index].hand, [countered_card.card.name]))
				]
					asserting game.stack != []
					where countered_card = game.stack[size(game.stack)-1]
					where edo = info.get_creature(game)
				",
			}],
		}
	},


	"Eye for an Eye": {
		name: "Eye for an Eye",
		rarity: 1,
		type: "spell",
		cost: 1,
		loyalty_cost: 2,
		school: "@eval FAITH",
		portrait: "eye-for-an-eye.png",
		artist: "eleazzaar",
		is_response: true,
		rules: "Whenever target creature deals damage this turn, it also takes that much damage.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands creature.add_triggered_ability_until_end_of_turn({
				name: 'Eye for an Eye',
				rules: 'When creature deals damage that much damage is dealt to it as well',
				on_deal_damage: 'def(class creature creature, class game_state game, class creature target, int damage) ->commands add(creature.life, -damage)',
			})
			asserting size(info.targets) = 1
			where creature = game.creature_at_loc_or_die(info.targets[0])",
	},

    "Hieroglyph of the Sun": {
		name: "Hieroglyph of the Sun",
		type: "spell",
		is_response: false,
        tags: ['Rune'],
		cost: 3,
		loyalty_cost: 2,
		school: "@eval FAITH",
		rarity: 0,
		rules: "Target a shrine, tower, alter, or temple land. It gains the following ability: At the start of each players turn, allied creatures on or adjacent to this gain 1 life.",
        
		possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
        if(targets = [],
			 [creature.loc | creature <- game.permanents, creature.is_valid_target(game, avatar.controller, me), creature.is_land, ('Shrine' in creature.tags or 'Temple' in creature.tags or 'Alter' in creature.tags or 'Tower' in creature.tags)], null)",
             
		on_play: "def(class game_state game, class message.play_card info) ->commands
          if(target, add(target.triggered_abilities, 
      [{
            name: 'Sun Hieroglyph',
            rules: 'At the start of each turn, allies on or adjacent to you gain one life.',
            on_begin_turn: q(def(class creature creature, class game_state game) ->commands
        [add(c.life, 1) | c <- game.creatures, c.loc = creature.loc or game.locs_adjacent(c.loc, creature.loc), creature.controller = c.controller]
    ),
      }]), null) where target = game.land_at_loc(info.targets[0])"
	},


    
    "Lady Meira, the Hopeful": {
		name: "Lady Meira, the Hopeful",
		type: "creature",
		portrait: "meira-hopeful.png",
		cost: 6,
		loyalty_cost: 4,
		school: "@eval FAITH",
		rarity: 2,
        hero: true,
        flavor_text: "Rest now, I'll wait by your side till the dawn.",
		creature: {
			tags: ['Human', 'Cleric'],
			attack: 5,
			life: 5,
            passive_abilities: [ {
				name: "Inspiring",
				rules: "Your other creatures have <i>Valiant</i>.",
				static_effect: "def(class game_state game, class creature creature) ->commands
				[   target.add_ability_static_duration('Valiant')
				  | target <- game.creatures,
				    target.controller = creature.controller and
                    not target = creature
				]"
			}],
            triggered_abilities: [{
				name: "Mirical",
                rules: "End of each turn: your creatures with 0 or less health gain 3 health.",
				on_end_turn: "def(class creature creature, class game_state game) ->commands
                       map(game.creatures, if(value.controller = creature.controller and value.life < 1, add(value.life, 3)))",
			}]
		}
	},

	"Sir Trenis, Knight of the Thorn": {
		name: "Sir Trenis, Knight of the Thorn",
		type: "creature",
		portrait: "sir-trenis.png",
		cost: 4,
		loyalty_cost: 2,
		school: "@eval FAITH",
		rarity: 2,
        hero: true,
		creature: {
			abilities: ['Swift'],
			tags: ['Mounted'],
			attack: 5,
			life: 4,
			image_num: 19,
            passive_abilities: [ {
				name: "Bold Tactics",
				rules: " 'Mounted' creatures you control gain first strike.",
				static_effect: "def(class game_state game, class creature creature) ->commands
				[   target.add_ability_static_duration('First Strike')
				  | target <- game.creatures,
				    target.controller = creature.controller and ('Mounted' in target.tags)
				]"
			}],
		}
	},

	"Shrine of the Martyr": {
		name: "Shrine of the Martyr",
		type: "creature",
		rarity: 0,
		cost: 3,
		loyalty_cost: 1,
		school: "@eval FAITH",
		portrait: "shrine-of-the-martyr.png",
		rules: "+1 mana/turn",
		creature: {
			tags: ["Shrine"],
			life: 4,
			is_land: true,
			image_num: 4,
			portrait_scale: 0.15,
			portrait_y_offset: 40,

			income: "def(class game_state game) ->int 1",
		}
	},

	"Battle Deacon": {
		name: "Battle Deacon",
		rarity: 1,
		type: "creature",
		portrait: "battle-deacon.png",
		cost: 6,
		loyalty_cost: 2,
		school: "@eval FAITH",
		creature: {
			sound_summoned: "creatures/summon-soldier.wav",
			attack: 5,
			life: 8,
			move: 1,
            passive_abilities: [{
				name: "Battle Prayer",
				rules: "Your creatures in this lane have +3 attack.",
				static_effect: "def(class game_state game, class creature creature) ->commands
				[   
                    if(creature.controller = target.controller and creature.loc[0]=target.loc[0],
				    [target.apply_static_effect('attack', 2)])
				  | target <- game.creatures,
				    target.is_building = false
				]"
			}],
		},
	},

        "Zupadins Moving Castle": {
		name: "Zupadins Moving Castle",
		rarity: 2,
		type: "creature",
		portrait: "zupadins-moving-castle.png",
		cost: 7,
		loyalty_cost: 4,
        hero: true,
		school: "@eval SAPIENZA",
		creature: {
			attack: 6,
            tags: ['Fortress'],
            abilities: ['Ranged'],
			life: 10,
            is_building: true,
            activated_abilities: [
				{
					name: 'Relocate',
					cost: 2,
					school: "@eval SAPIENZA",
					rules: "Spend an action, move Zupadins Moving Castle to an adjacent hex.",
					once_per_turn: true,

					possible_targets: "
					 def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
						if(targets = [], filter(
								game.get_adjacent_locs(creature.loc),
							game.is_loc_on_board(value) and
							game.creature_at_loc(value) = null), null)
					",

					on_play: "def(class game_state game, class message.play_card info) ->commands [
						creature.set_loc(game, info.targets[0], 'move'),
					] asserting size(info.targets) = 1
					  where creature = info.get_creature(game)",
				}
			]
		}
	},

 
    "Haste": {
		name: "Haste",
		rarity: 0,
		type: "spell",
		cost: 2,
		loyalty_cost: 3,
		portrait: "haste.png",
		school: "@eval SAPIENZA",
		rules: "Target creature gains +1 movement and +1 action until end of turn.",
		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
          [
            target.apply_effect_until_end_of_turn('move', 1),
            target.apply_effect_until_end_of_turn('actions', 1),
		  ]
		   where target = game.creature_at_loc_or_die(info.targets[0])",

	},

	"Minotaur": {
		name: "Minotaur",
		rarity: 1,
		type: "creature",
		cost: 6,
		loyalty_cost: 0,
		school: "@eval FOOD",
		creature: {
			tags: ['Beast'],
			attack: 7,
			life: 8,
			move: 2,
			image_num: 30,
		}
	},

"Lycanthrope": {
		name: "Lycanthrope",
		type: "creature",
        portrait: "lycanthrope.png",
		cost: 3,
		loyalty_cost: 2,
		school: "@eval FOOD",
		creature: {
			tags: ['Human'],
			attack: 3,
			life: 3,
			move: 1,
			triggered_abilities: [{
				name: "Shapeshift",
				rules: 'At the start of your next turn, turns into a 7,6 Werewolf, with marauder and 2 movement that will change back into a Lycanthrope the turn after.',
                on_begin_turn: "def(class creature creature, class game_state game) ->commands
            if(game.current_player = creature.controller,creature.transform(game, lib.citadel.create_creature('Werewolf')))
            "}],
		}
	},

    "Purrsan Dominant": {
		name: "Purrsan Dominant",
		rarity: 0,
		type: "creature",
		portrait: "purrsan-dominant.png",
		portrait_focus: [224,504],
		portrait_focus_height: 160,
		cost: 4,
		loyalty_cost: 2,
		school: "@eval FOOD",
		creature: {
			tags: ['Purrsan', 'Beast'],
			attack: 6,
			life: 5,
			move: 1,
			image_num: 5,
            triggered_abilities: [{
				name: "Devour",
				rules: "When Purrsan Dominant destroys a creature and survives, it gains +1/+2",
				on_kill: "def(class creature creature, class game_state game, class creature victim) ->commands
                if(not victim.is_building, [
                add(creature.attack, 1),
                add(creature.life, 2),
                ])
			",
			}],
		}
	},

    "Strangling Vines": {
		name: "Strangling Vines",
		rarity: 0,
		type: "spell",
		cost: 1,
		loyalty_cost: 2,
		school: "@eval FOOD",
		portrait: "strangling_vines.png",
		artist: "eleazzaar",
		rules: "Target enemy becomes snared. Inflict 1 damage to it.",
		possible_targets: "enemy_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		      [creature.snare(),
              creature.inflict_damage(game, 1)]
					asserting size(info.targets) = 1
					where creature = game.creature_at_loc_or_die(info.targets[0])",
	},
	

    "Mighty Gust": {
		name: "Mighty Gust",
		type: "spell",
        portrait: "mighty-gust.png",
		cost: 1,
		loyalty_cost: 2,
		school: "@eval FOOD",
		is_response: true,
		rules: "Target a lane. Push backward all creatures in that lane that can be pushed.",
		possible_targets: "all_tiles_as_possible_targets",

		on_play: "def(class game_state game, class message.play_card info) ->commands
		[
            map(sorted_creatures, ; //note the semi-colon is important
            if(game.is_loc_on_board(move_to) and game.creature_at_loc(move_to) = null,
                set(value.loc, move_to))
        where move_to = [value.loc[0],value.loc[1]+direction]
                )
                //sort these creatures front-to-back depending on which
                //direction we are blowing them in.
                where sorted_creatures = sort(enemy_creatures_in_lane, if(direction < 0, a.loc[1] < b.loc[1], b.loc[1] < a.loc[1]))
                //get all the enemy creatures in the lane
                where enemy_creatures_in_lane = filter(game.creatures, value.loc[0] = info.targets[0][0] and value.controller != info.player_index)
                //direction we want to move creatures in
                where direction = if(info.player_index = 0, 1, -1)
		]",
	},

	"Bazaar": {
		name: "Bazaar",
		rarity: 2,
		type: "creature",
		portrait: "bazaar.png",
		cost: 6,
		loyalty_cost: 2,
		school: "@eval GOLD",
		rules: "Gain +1 mana per turn for each other land you control.",
		creature: {
			tags: ['Marketplace'],
			is_land: true,
			portrait_y_offset: 75,
			portrait_scale: 0.15,
			income: "def(class game_state game) ->int count(game.lands, value.controller = me.controller) - 1", // must subtract self
		}
	},

	"Barracks": {
		name: "Barracks",
		rarity: 1,
		type: "creature",
		cost: 4,
		loyalty_cost: 1,
		school: "@eval GOLD",
		portrait: "barracks.png",
		rules: "You may summon creatures on or adjacent to Barracks.",
		creature: {
			is_land: true,
            abilities: ['Staging Ground'],
			portrait_scale: 0.15,
			portrait_y_offset: 50,
			allows_summoning: "def(class game_state game, class creature target) ->[Loc]
			if(not target.is_land,
			  filter(game.all_locs, (game.locs_adjacent(value, loc) or value = loc) and
			         game.creature_at_loc(value) = null), [])",
		}
	},

	"Bounty": {
		name: "Bounty",
		portrait: "bounty.png",
		type: "spell",
		school: "@eval GOLD",
		cost: 2,
		loyalty_cost: 2,
		rules: "Put a price on the head of target creature. If it is later killed in combat, the killer gains 2 attack and 1 armor.",

		possible_targets: "all_creatures_as_possible_targets",
		on_play: "def(class game_state game, class message.play_card info) ->commands
		add(target.triggered_abilities, [{
			name: 'Price on his Head',
			rules: q(If this creature is killed in combat, the killer gains +2 attack and +1 armor.),
			on_die: 'def(class creature died, class game_state game) -> commands [
				if (killer is null, [], [ add(killer.attack, 2), add(killer.armor, 1) ] )
				where killer = died.killed_by_this_turn(game)
			]',
		}])
		where target = game.creature_at_loc_or_die(info.targets[0])
		",
	},

	"Agitated Peasant" : {
		name: "Agitated Peasant",
		type: "creature",
		portrait: "agitated_peasant.png",
		school: "@eval GOLD",
		cost: 3,
		creature: {
			tags: ['Human'],
			attack: 3,
			life: 4,
			armor: 0,
			move: 1,
		}		
	},

	"Rally the People": {
		name: "Rally the People",
		portrait: "rally_the_people.png",
		#artist: "Robert Couse-Baker",
		type: "spell",
		school: "@eval GOLD",
		cost: 4,
		loyalty_cost: 2,
		rules: "On each unoccupied tile containing a land that you control (not summoned this turn), you get a 3/4 'Agitated Peasant'",

		on_play: "def(class game_state game, class message.play_card info) -> commands
		map(peasant_hexes, game.summon_creature(
					lib.citadel.create_creature('Agitated Peasant', 
					{
						controller: game.current_player, 
						portrait: 'agitated_peasant.png',
						loc: value,
						is_land: false,
						school: GOLD,
					})))
		where peasant_hexes = filter(land_locations, 0=size([ creature | creature <- game.creatures, not creature.is_land, creature.loc = value]))
		where land_locations = [ land.loc | land <- game.lands, land.controller = game.current_player, not land.summoned_this_turn ]",
	},

    "Colony": {
		name: "Colony",
		type: "creature",
		cost: 5,
		portrait: "colony.png",
		portrait_focus: [359,560],
		portrait_focus_height: 140,
		school: "@eval GOLD",

		creature: {
			tags: ["Settlement"],
			portrait_y_offset: 20,
			portrait_scale: 0.15,
			life: 6,
			is_land: true,
			image_num: 0,
            
            triggered_abilities: [{
                on_card_discarded: "def(class creature creature, class game_state game, class player player, class card card) ->commands
                [if (player.player_index = creature.controller, 
                player.gain_mana_with_hint(game, creature.loc), 
                null)]",
				name: "Demand",
				rules: "When you discard a card, gain 1 mana.",
			}]
		}

	},

    "Prosperous City": {
		name: "Prosperous City",
		type: "creature",
		cost: 5,
        loyalty_cost: 2,
		portrait: "alliance-headquarters.png",
		portrait_focus: [359,560],
		portrait_focus_height: 140,
		school: "@eval GOLD",
		rules: "Can only be played on top of a Materia land you control.",
		flavor_text: "This is our strength. The strength of many. Each flowing his own way and yet each inadvertantly contributing ot the whole.",
        possible_targets: "def(class game_state game, class creature avatar, [Loc] targets) ->[Loc]|null
        if(targets = [],
			 [creature.loc | creature <- game.permanents, creature.is_valid_target(game, avatar.controller, me), creature.controller = game.current_player_index, creature.is_land, MATERIA in creature.school], null)",
		creature: {
			tags: ["Settlement", "Base"],
			portrait_y_offset: 20,
			portrait_scale: 0.15,
			life: 6,
			is_land: true,
			image_num: 0,

			income: "def(class game_state game) ->int 2",
            
            passive_abilities: [{
				static_effect: "def(class game_state game, class creature creature) ->commands
				if(creature.controller >= 0,
				   game.players[creature.controller].apply_static_effect(
					(def(class player p, map info) ->commands add(p.card_draw, 1)),
					(def(class player p, map info) ->commands add(p.card_draw, -1)),
					{}))",
				
				name: "Commerce",
				rules: "+1 hand size
+2 mana per turn
",
			}]
		}

	},

 
	"Sacred Refuge": {
		name: "Sacred Refuge",
		rarity: 1,
		type: "creature",
		cost: 3,
		loyalty_cost: 0,
		school: "@eval FAITH",
		portrait: "sacred-refuge.png",
		creature: {
			tags: ["Shrine"],
            abilities: ['Staging Ground'],
			life: 8,
			level: 1,
			is_land: true,
			image_num: 4,
			portrait_scale: 0.15,
			portrait_y_offset: 45,

			activated_abilities: [{
				name: 'Refuge',
				once_per_turn: true,
				school: "@eval FAITH",
				rules: "Move target friendly creature to Sacred Refuge",
				cost: 2,
				possible_targets: "def(class game_state game, class creature creature, [Loc] targets) ->[Loc]|null
					if(size(targets) > 0, null,
						if(game.creature_at_loc(creature.loc) != null, [],
							[c.loc | c <- game.creatures, c.controller = creature.controller]
						)
					)
				",

				on_play: "def(class game_state game, class message.play_card info) ->commands [
					game.creature_at_loc_or_die(info.targets[0]).set_loc(game, creature.loc, 'blink'),
				] where creature = info.get_creature(game)",
				is_response: true,
			}],

		}
	},





	// only visual effects testing after this point

	"effect_black_smoke_circling_hex": {
		name: "effect_black_smoke_circling_hex",
		type: "creature",
		cost: 1,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		rarity: 0,
		portrait: "diseased-corpse.png",
// 		artist: "lisanguyen",
		portrait_focus: [276,163],
		portrait_focus_height: 90,
		creature: {
			game_sounds: "ghostly_creature",
			tags: ['Undead', 'Zombie'],
			attack: 4,
			life: 3,
			move: 1,
			passive_abilities: [{
				name: "Disease Cloud",
				rules: "Adjacent enemy creatures have -1/-1.",
				particle_effects: ['black_smoke_circling_hex'],
				static_effect: "def(class game_state game, class creature creature) ->commands
				[
				[
				   target.apply_static_effect('attack', -1),
				   target.apply_static_effect('life', -1),
				]
				  | target <- game.creatures,
				    not target.is_building,
					target.controller != creature.controller,
					game.locs_adjacent(creature.loc, target.loc)
				]"
			}],
		}
	},

	"effect_smoke_candidate": {
		name: "effect_smoke_candidate",
		type: "creature",
		cost: 1,
		loyalty_cost: 0,
		school: "@eval BLOOD",
		rarity: 0,
		portrait: "diseased-corpse.png",
// 		artist: "lisanguyen",
		portrait_focus: [276,163],
		portrait_focus_height: 90,
		creature: {
			game_sounds: "ghostly_creature",
			tags: ['Undead', 'Zombie'],
			attack: 4,
			life: 3,
			move: 1,
			passive_abilities: [{
				name: "Disease Cloud",
				rules: "Adjacent enemy creatures have -1/-1.",
				particle_effects: ['smoke_candidate'],
				static_effect: "def(class game_state game, class creature creature) ->commands
				[
				[
				   target.apply_static_effect('attack', -1),
				   target.apply_static_effect('life', -1),
				]
				  | target <- game.creatures,
				    not target.is_building,
					target.controller != creature.controller,
					game.locs_adjacent(creature.loc, target.loc)
				]"
			}],
		}
	},

// end visual effects testing



}
